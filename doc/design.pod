
=head1 DESIGN GOALS

In order of priority, the goals are:

=over

=item Be lightweight

The less memory an app consumes, the more workers you can run.
The fewer dependencies you have, the faster you can build docker images.
The more efficient the dispatch cycle, the less processor you need.
Your app restarts faster.

=item Be obvious

The lower the learning curve, the faster a developer can make full use of
a module.  The more obvious the design, the less questions the developer
will have. The simpler the design, the less code you need to write to do
something unusual, and the less hair you pull out tracking down bugs.

=item Be extensible

Nothing is more annoying than finding out that you can't extend a framework in
the way that you want in the time you have available.

=item Be convenient

Somewhat at odds with minimalism, but make sure that users can quickly
accomplish common tasks without jumping through hoops.
I<Don't> force the developer to use the latest fancy fad in programming style
because they won't be used to it and will bog down development.
I<Don't> provide a feature that the programmer can easily add themselves
or that people frequently want to customize.  I<Do> provide recipes for how
to add these common features, or plugins that provide them the common way.

=item Scale

Even though it's simple/lightweight, the framework should be able to scale
to larger applications, because rarely do people actually know the full scope
of a project before they start.

=back

To reach those broad goals, I picked these design features:

=over

=item Single Object Focus

The user's webapp class is used for both the App instance and the per-request
instance, and most behavior happens as methods on this class, giving users the
ability to alter almost any behavior with simple method overriding.

The webapp object is derived from Moo, so it is easy to subclass, and easy to
share behavior using Roles.  Per-request data can be calculated with lazy-built
attributes without worrying about leaking data between requests.

I did also split some of the behavior into the Request object, for clarity,
but I don't anticipare much of it needing to be customized.

=item Public Request Lifecycle

Each step of the request lifecycle is a public part of the API.  There
is little "magic under the hood".  Users can depend on this mechanism remaining
unchanged.  The dispatch mechanism follows a mostly obvious design, and I split
each step into its own small method in hopes that just subclassing or wrapping
these methods can handle any customization that someone needs.

=item Sugar-friendly

The C<use>-line for C<Web::ConServe> has a syntax in the style of a command
line argument list, making it easy to pull in plugins or roles and ask for
other behavior all in a flat list.

With the plugin system allowing both imports and Moo inheritance changes,
this should make everyone's wildest dreams possible while requring a very
minimal declaration at the top of the file.

=item Loose "MVC"

Rather than View and Controller being separate classes, I made the webapp class
itself be the controller, with a suggested but optional C<view>.  Users can
decide the level of abstraction they want here.

The Model is completely up to the user and can be loaded as an attribute.

=item Cached Dispatcher

The most complexity of the entire framework is in the compilation phase of the
dispatcher.  It trees up the available actions in a data structure that allows
efficient search of matching actions, so it should scale to arbitrarily large
applications.  But, the tree isn't public to the API, so the implementation
can change as needed without breaking anything, and users are free to
implement their own if they have a faster way of matching actions.

=item Nestable

Also part of scalability, the Request object has convenience methods to help
dispatch a request to a sub-controller.  You can then create arbitrary trees
of controllers.

=item No Policy Where Not Needed

There a a hundred ways to load configuration into a Moo object, so my opinion
doesn't need to be part of the framework.

There are dozens of ways to deal with exceptions, including Plack middleware,
so I choose a default of not catching them at all.

User sessions can already be handled by Plack middleware, so I defer to that
with examples.  (and those could be wrapped into a Plugin)

There is no official filesystem layout, so users can use whatever layout makes
the most sense for their usage.

Everyone and their cat has a favorite logging system, and even the one for PSGI
is an optional extension.  So let logging be done with an optional Plugin.

=back

